#Notes on Unit3: Function
##Variable Positional Arguments
>The following code implements the add function of a ShoppingCart class  
>However, it will raise an TypeError when items contains only a single item  
  
```python
class ShoppingCart:
    def add_to_chart(items):
        self.items.extend(items)
```
>Here we could add an asterisk before an argument name in order to have  
>the add_to_chart() function valid for both single item and multiple items.
```python
class ShoppingCart:
    def add_to_chart(*items):
        self.items.extend(items)
```
****
##Combine Different Kinds of Arguments
### Four types of arguments in python
* ####Required arguments
* ####Optional arguments
* ####Variable positional arguments
* ####Variable keyword arguments    
Putting together we got:  
```python
    def create_element(name, editable=True, *children, **attributes):
```  
>**one shortcoming:** you'd have to supply a value for editable as a positional argument in order to pass in any children at all  

>**another feature:** the explicit arguments placed after variable positional  
>arguments can still be required. The only difference between the two types
>of placement is the requirement of using keyword arguments.
****
##Preloading Arguments
>when you know some of the argument values will need to be passed later.  
```python
    import os
    def load_file(file, base_path='/', mode='rb'):
        return open(os.path.join(base_path, file), mode)
    import functools
    load_writable = functools.partial(load_file, mode='w')
```
>It's like a function decorator. You type in a function, it gives back another one.
****
##Decorators
###common stuations when decorators are used
* Access control
* Cleanup of temporary objects
* Error handling
* Caching
* Logging  

>There are two versions of decorators:  

>*new version:*
```python
    @suppress_errors
    def log_error(message, log_file='error.log'):
        log = open(log_file, 'w')
        log.write('%s\t%s\n' % (datetime.datetime.now(), message)
```

>*old version:*
```python
    def log_error(message, log_file='error.log'):
        log = open(log_file, 'w')
        log.write('%s\t%s\n' % (datetime.datetime.now(), message)
    log_error = suppress_errors(log_error)
```
>**note that:** the @ syntax is only available when defining the function in the sourcefile.  
>if you want to decorate a function that was imported from elsewhere, you'll have to   
>pass it into the decorator mannually, so it's important to remember both ways.
****
####Closures
**A closure is a function that's defined inside another function but is then passed outside  
that function where it can be used by other code**
>for example:
```python
    def multiply_by(factor):
        def multiply(value):
            return value * factor
        return multiply
    times2 = multiply_by(2)
    print(times2(2))
```
****
####Wrappers
**Wrappers are functions designed to contain another function, adding some extra behavior  
before or after the wrapped function executes.**
>for example: the decorator takes a function as its only argument, which isn't executed until  
>the inner wrapper function executes. By returning the wrapper instead of the original function  
>we form a closure. 
```python
    def suppress_errors(*args, **kwargs):
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception:
                pass
        return wrapper
```
>Use a decorator inside a decorator
```python
    import functools
    
    def suppress_errors(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception:
                pass
        return wrapper
```
>The inner part is equal to:
```python
    wrapper = functools.wraps(func)(wrapper)
```
****
####Decorators with Arguments
> Here's how the suppress_errors() decorator might look if it instead accepted a logger function  
>to report the errors to, rather than completely silencing them:
```python
    import functools
    
    def suppress_errors(log_func=None):
        def decorator(func):
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if log_func is not None:
                        log_func(str(e))
            return wrapper
        return decorator
```
****
#### Decorators with-or without-Arguments
```python
    import functools
    
    def suppress_errors(func=None, log_func=None):
        def decorator(func):
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if log_func is not None:
                        log_func(str(e))
            return wrapper
        if func is None:
            return decorator
        else:
            return decorator(func)
```
****
####A Decorator to Create Decorators
```python
    def decorator(decleared_decorator):
        @functools.wraps(declared_decorator)
        def final_decorator(func=None, **kwargs):
            def decorated(func):
                @functools.wraps(func)
                def wrapper(*a, **kw):
                    return declared_decorator(func, a, kw, **kwargs)
                return wrapper
            if func is None:
                return decorated
            else:
                return decorated(func)
        return final_decorator
    
    @decorator
    def suppress_errors(func, args, kwargs, log_func=None):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            if log_func is not None:
                log_func(str(e))
```
****
##Generators
Generators allows you to define a function that can produce individual values one at a time, rather than just a single return value, you have the added flexibility of a function and the performance of an iterator.
```python
    def fibonacci(count):
        a, b = -1, 1
        while count > 0:
            c = a+b
            yield 
        a, b = b, c
        count -= 1
```
****
##Lambdas
```python
    g = lambda x: x**2
    a = lambda: 'example'
    b = lambda: x, y=3: x + y
```
>###Introspection
we could use the attribut ```__name__``` to track the name of a given function
```python
    def example():
        pass
    example.__name__
    (lambda: None).__name__
```
****
##Identify Object Types
* use the built-in **type()** function
* use **isinstance()** function to test whether an object is an instance of a class

##Modules and Pcakages
* all functions and classes have a ```__module__``` attribute, which contains the import location of the module where the code was defined.
* functions have a ```__doc__``` attribute which stores the docstrings of that functions.